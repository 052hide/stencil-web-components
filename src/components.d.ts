/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { WcButtonProps } from "./components/wc-button/type";
import { WcInputProps } from "./components/wc-input/type";
export namespace Components {
    interface SampleContainer {
        /**
          * click event
         */
        "handleClicked": () => Promise<void>;
        /**
          * input event
         */
        "handleInput": (event: CustomEvent<string>) => Promise<void>;
    }
    interface WcButton {
        /**
          * fit button width to its parent width
         */
        "block": WcButtonProps['block'];
        /**
          * button disabled
         */
        "disabled": WcButtonProps['disabled'];
        /**
          * html button type
         */
        "htmlType": WcButtonProps['htmlType'];
        /**
          * show loading icon
         */
        "loading": WcButtonProps['loading'];
        /**
          * size of button
         */
        "size": WcButtonProps['size'];
        /**
          * theme of button
         */
        "theme": WcButtonProps['theme'];
    }
    interface WcInput {
        /**
          * input disabled
         */
        "disabled": WcInputProps['disabled'];
        /**
          * label of input
         */
        "label": WcInputProps['label'];
        /**
          * name of input
         */
        "name": WcInputProps['name'];
        /**
          * placeholder of input
         */
        "placeholder": WcInputProps['placeholder'];
        /**
          * value of input
         */
        "value": WcInputProps['value'];
    }
}
declare global {
    interface HTMLSampleContainerElement extends Components.SampleContainer, HTMLStencilElement {
    }
    var HTMLSampleContainerElement: {
        prototype: HTMLSampleContainerElement;
        new (): HTMLSampleContainerElement;
    };
    interface HTMLWcButtonElement extends Components.WcButton, HTMLStencilElement {
    }
    var HTMLWcButtonElement: {
        prototype: HTMLWcButtonElement;
        new (): HTMLWcButtonElement;
    };
    interface HTMLWcInputElement extends Components.WcInput, HTMLStencilElement {
    }
    var HTMLWcInputElement: {
        prototype: HTMLWcInputElement;
        new (): HTMLWcInputElement;
    };
    interface HTMLElementTagNameMap {
        "sample-container": HTMLSampleContainerElement;
        "wc-button": HTMLWcButtonElement;
        "wc-input": HTMLWcInputElement;
    }
}
declare namespace LocalJSX {
    interface SampleContainer {
    }
    interface WcButton {
        /**
          * fit button width to its parent width
         */
        "block"?: WcButtonProps['block'];
        /**
          * button disabled
         */
        "disabled"?: WcButtonProps['disabled'];
        /**
          * html button type
         */
        "htmlType"?: WcButtonProps['htmlType'];
        /**
          * show loading icon
         */
        "loading"?: WcButtonProps['loading'];
        /**
          * click event emit
         */
        "onClicked"?: (event: CustomEvent<any>) => void;
        /**
          * size of button
         */
        "size"?: WcButtonProps['size'];
        /**
          * theme of button
         */
        "theme"?: WcButtonProps['theme'];
    }
    interface WcInput {
        /**
          * input disabled
         */
        "disabled"?: WcInputProps['disabled'];
        /**
          * label of input
         */
        "label"?: WcInputProps['label'];
        /**
          * name of input
         */
        "name"?: WcInputProps['name'];
        /**
          * click event emit
         */
        "onChangeValue"?: (event: CustomEvent<string>) => void;
        /**
          * placeholder of input
         */
        "placeholder"?: WcInputProps['placeholder'];
        /**
          * value of input
         */
        "value"?: WcInputProps['value'];
    }
    interface IntrinsicElements {
        "sample-container": SampleContainer;
        "wc-button": WcButton;
        "wc-input": WcInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sample-container": LocalJSX.SampleContainer & JSXBase.HTMLAttributes<HTMLSampleContainerElement>;
            "wc-button": LocalJSX.WcButton & JSXBase.HTMLAttributes<HTMLWcButtonElement>;
            "wc-input": LocalJSX.WcInput & JSXBase.HTMLAttributes<HTMLWcInputElement>;
        }
    }
}
